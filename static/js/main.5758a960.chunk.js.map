{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["images","columns","window","innerWidth","cellWidth","items","Array","fill","startingSize","width","height","pageImageSize","innerHeight","activeOne","prevActiveOne","flow","i","xy","Math","floor","getCellPos","nonActiveState","activeState","from","to","opacity","Page","history","useHistory","useSpring","style","backgroundImage","backgroundSize","backgroundPosition","position","left","top","onClick","goBack","Grid","useState","active","setActive","useSprings","length","springs","set","useEffect","setTimeout","push","div","map","props","console","log","zIndex","transform","interpolate","x","y","key","App","location","useLocation","transitions","useTransition","pathname","leave","className","minHeight","minWidth","item","path","component","WithRouter","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2QAYMA,EAAS,CAAC,UAAW,SACrBC,EAAUC,OAAOC,WAAa,IAAM,EAAI,EACxCC,EAAYF,OAAOC,WAAaF,EAEhCI,EAAQ,IAAIC,MAAM,IAAIC,KAAK,MAC3BC,EAAe,CACnBC,MAAOL,EACPM,OAAQN,GAEJO,EAAgB,CACpBF,MAAOP,OAAOC,WACdO,OAAQR,OAAOU,aAEbC,EAAY,KACZC,EAAgB,KAOpB,IAAMC,EAAO,SAAAC,GACX,IAAMC,EAPR,SAAoBD,GAIlB,MAAO,CAHGZ,GAAaY,EAAIf,GACjBG,EAAYc,KAAKC,MAAMH,EAAIf,IAK1BmB,CAAWJ,GAEhBK,EAAc,aAClBJ,MACGT,GAGCc,EAAW,aACfL,GAAI,CAAC,GAAI,MACNN,GAGL,OAAIK,IAAMF,GAA+B,OAAdD,EAClB,CACLU,KAAK,eAAMD,GACXE,GAAG,eAAMH,IAEFL,IAAMF,GAA+B,OAAdD,EACzB,CACLU,KAAK,eAAMF,EAAP,CAAuBI,QAAS,IACpCD,GAAG,eAAMH,EAAP,CAAuBI,QAAS,KAIpB,OAAdZ,EACK,CACLU,KAAK,eAAMF,EAAP,CAAuBI,QAAS,IACpCD,GAAG,eAAMH,EAAP,CAAuBI,QAAS,KAIlCT,IAAMH,EACD,CACLU,KAAK,eAAMF,EAAP,CAAuBI,QAAS,IACpCD,GAAG,eAAMF,EAAP,CAAoBG,QAAS,KAExBT,IAAMH,GAA2B,OAAdA,EACrB,CACLU,KAAK,eAAMF,EAAP,CAAuBI,QAAS,IACpCD,GAAG,eAAMH,EAAP,CAAuBI,QAAS,UAH/B,GAaT,SAASC,IACP,IAAMC,EAAUC,cACHC,YAAU,CAAEN,KAAM,CAAEE,QAAS,GAAKA,QAAS,IACxD,OACE,yBAAKK,MAAO,CAAEpB,OAAQ,OAAQD,MAAO,SACnC,yBACEqB,MAAK,aACHC,gBAAgB,OAAD,OAAS/B,EAAO,GAAhB,KACfgC,eAAgB,QAChBC,mBAAoB,OACjBtB,KAGP,yBACEmB,MAAO,CACLI,SAAU,WACVC,KAAM,GACNC,IAAK,IAEPC,QAAS,WACPvB,EAAgBD,EAChBA,EAAY,KACZc,EAAQW,WATZ,QAcA,yCACA,8CACA,0CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,+CAKN,SAASC,IACP,IAAMZ,EAAUC,cADF,EAEcY,mBAAS3B,GAFvB,mBAEP4B,EAFO,KAECC,EAFD,OAIeC,YAAWtC,EAAMuC,OAAQ7B,GAJxC,mBAIP8B,EAJO,KAIEC,EAJF,UAiBd,OAXAC,qBAAU,WACRD,EAAI/B,GAEW,OAAX0B,GACFO,YAAW,WACTrB,EAAQsB,KAAK,SAAWR,KACvB,OAGJ,CAACA,IAGF,kBAAC,IAASS,IAAV,CACEpB,MAAO,CACLI,SAAU,WACVE,IAAK,MAGNS,EAAQM,KAAI,SAACC,EAAOpC,GAEnB,OADAqC,QAAQC,IAAIF,GAEV,kBAAC,IAASF,IAAV,CACEpB,MAAK,aACHI,SAAU,WACVC,KAAM,EACNC,IAAK,EACLL,gBAAgB,OAAD,OAAS/B,EAAO,GAAhB,KACfgC,eAAgB,QAChBC,mBAAoB,MACpBsB,OAAQd,IAAWzB,EAAI,IAAM,EAC7BwC,UAAWJ,EAAMnC,GAAGwC,aAClB,SAACC,EAAGC,GAAJ,4BAAyBD,EAAzB,eAAiCC,EAAjC,cAECP,GAELf,QAAS,WACPxB,EAAYG,EACZ0B,EAAU1B,IAEZ4C,IAAK5C,QAQjB,SAAS6C,IACP,IAAMC,EAAWC,cACXC,EAAcC,YAAcH,GAAU,SAAAA,GAAQ,OAAIA,EAASI,WAAU,CACzE3C,KAAM,CAAEW,SAAU,WAAYzB,MAAO,OAAQC,OAAQ,QACrDyD,MAAO,CAAE1C,QAAS,KAEpB,OACE,yBAAK2C,UAAU,MAAMtC,MAAO,CAAEuC,UAAW,QAASC,SAAU,UACzDN,EAAYb,KAAI,cAAGoB,KAAH,IAASnB,EAAT,EAASA,MAAOQ,EAAhB,EAAgBA,IAAhB,OACf,kBAAC,IAASV,IAAV,CAAcU,IAAKA,EAAK9B,MAAOsB,GAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,YAAYC,UAAW/C,IACnC,kBAAC,IAAD,CAAO8C,KAAK,KACV,kBAACjC,EAAD,aAgBCmC,MAPf,WACE,OACE,kBAAC,IAAD,KACE,kBAACb,EAAD,QChMcc,QACW,cAA7BzE,OAAO4D,SAASc,UAEe,UAA7B1E,OAAO4D,SAASc,UAEhB1E,OAAO4D,SAASc,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.5758a960.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n  useLocation\n} from \"react-router-dom\";\nimport { useSpring, animated, useTransition, useSprings } from \"react-spring\";\n\nconst images = [\"./1.jpg\", \"2.jpg\"];\nconst columns = window.innerWidth < 768 ? 2 : 4;\nconst cellWidth = window.innerWidth / columns;\nconst random = length => Math.floor(Math.random() * length);\nconst items = new Array(10).fill(null);\nconst startingSize = {\n  width: cellWidth,\n  height: cellWidth\n};\nconst pageImageSize = {\n  width: window.innerWidth,\n  height: window.innerHeight\n};\nlet activeOne = null;\nlet prevActiveOne = null;\nfunction getCellPos(i) {\n  const x = cellWidth * (i % columns);\n  const y = cellWidth * Math.floor(i / columns);\n\n  return [x, y];\n}\nconst flow = i => {\n  const xy = getCellPos(i);\n\n  const nonActiveState = {\n    xy,\n    ...startingSize\n  };\n\n  const activeState = {\n    xy: [0, -500],\n    ...pageImageSize\n  };\n\n  if (i === prevActiveOne && activeOne === null) {\n    return {\n      from: { ...activeState },\n      to: { ...nonActiveState }\n    };\n  } else if (i !== prevActiveOne && activeOne === null) {\n    return {\n      from: { ...nonActiveState, opacity: 0 },\n      to: { ...nonActiveState, opacity: 1 }\n    };\n  }\n\n  if (activeOne === null) {\n    return {\n      from: { ...nonActiveState, opacity: 1 },\n      to: { ...nonActiveState, opacity: 1 }\n    };\n  }\n\n  if (i === activeOne) {\n    return {\n      from: { ...nonActiveState, opacity: 1 },\n      to: { ...activeState, opacity: 1 }\n    };\n  } else if (i !== activeOne && activeOne !== null) {\n    return {\n      from: { ...nonActiveState, opacity: 1 },\n      to: { ...nonActiveState, opacity: 0 }\n    };\n  }\n\n  // return {\n  //   from: { ...nonActiveState },\n  //   to: { ...nonActiveState }\n  // };\n};\n\nfunction Page() {\n  const history = useHistory();\n  const fade = useSpring({ from: { opacity: 0 }, opacity: 1 });\n  return (\n    <div style={{ height: \"100%\", width: \"100%\" }}>\n      <div\n        style={{\n          backgroundImage: `url(${images[0]})`,\n          backgroundSize: \"cover\",\n          backgroundPosition: '50%',\n          ...pageImageSize\n        }}\n      />\n      <div\n        style={{\n          position: \"absolute\",\n          left: 20,\n          top: 20\n        }}\n        onClick={() => {\n          prevActiveOne = activeOne;\n          activeOne = null;\n          history.goBack();\n        }}\n      >\n        Back\n      </div>\n      <h1>Some page</h1>\n      <p>Bla bla bla bla</p>\n      <h3>more stuff</h3>\n      <p>Bla bla bla bla</p>\n      <p>Bla bla bla bla</p>\n      <p>Bla bla bla bla</p>\n      <p>Bla bla bla bla</p>\n      <p>Bla bla bla bla</p>\n      <p>Bla bla bla bla</p>\n      <p>Bla bla bla bla</p>\n      <p>Bla bla bla bla</p>\n      <p>Bla bla bla bla</p>\n    </div>\n  );\n}\n\nfunction Grid() {\n  const history = useHistory();\n  const [active, setActive] = useState(activeOne);\n\n  const [springs, set, stop] = useSprings(items.length, flow);\n\n  useEffect(() => {\n    set(flow);\n\n    if (active !== null) {\n      setTimeout(() => {\n        history.push(\"/page/\" + active);\n      }, 1000);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [active]);\n\n  return (\n    <animated.div\n      style={{\n        position: \"relative\",\n        top: 500\n      }}\n    >\n      {springs.map((props, i) => {\n        console.log(props);\n        return (\n          <animated.div\n            style={{\n              position: \"absolute\",\n              left: 0,\n              top: 0,\n              backgroundImage: `url(${images[0]})`,\n              backgroundSize: \"cover\",\n              backgroundPosition: '50%',\n              zIndex: active === i ? 999 : 0,\n              transform: props.xy.interpolate(\n                (x, y) => `translate3d(${x}px, ${y}px, 0)`\n              ),\n              ...props\n            }}\n            onClick={() => {\n              activeOne = i;\n              setActive(i);\n            }}\n            key={i}\n          />\n        );\n      })}\n    </animated.div>\n  );\n}\n\nfunction App() {\n  const location = useLocation();\n  const transitions = useTransition(location, location => location.pathname, {\n    from: { position: \"absolute\", width: \"100%\", height: \"100%\" },\n    leave: { opacity: 0 }\n  });\n  return (\n    <div className=\"App\" style={{ minHeight: \"100vh\", minWidth: \"100vw\" }}>\n      {transitions.map(({ item, props, key }) => (\n        <animated.div key={key} style={props}>\n          <Switch>\n            <Route path=\"/page/:id\" component={Page} />\n            <Route path=\"/\">\n              <Grid />\n            </Route>\n          </Switch>\n        </animated.div>\n      ))}\n    </div>\n  );\n}\n\nfunction WithRouter() {\n  return (\n    <Router>\n      <App />\n    </Router>\n  );\n}\nexport default WithRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}